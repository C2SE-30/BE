import streamlit as st
import pandas as pd
import requests
import io
import base64
import time
from datetime import datetime, date
from dateutil.parser import parse

# URL backend Flask
BASE_URL = "http://localhost:5000"

# H√†m g·ªçi API
def call_api(method, endpoint, json=None, files=None, params=None):
    try:
        if method == "post":
            response = requests.post(f"{BASE_URL}/{endpoint}", json=json, files=files, params=params)
        elif method == "get":
            response = requests.get(f"{BASE_URL}/{endpoint}", params=params)
        elif method == "put":
            response = requests.put(f"{BASE_URL}/{endpoint}", json=json)
        elif method == "delete":
            response = requests.delete(f"{BASE_URL}/{endpoint}", params=params)
        if response.status_code in [200, 204]:
            return response.json() if response.status_code == 200 else None, None
        else:
            return None, response.json().get("error", f"L·ªói {response.status_code}")
    except requests.RequestException as e:
        return None, f"L·ªói k·∫øt n·ªëi: {str(e)}"

# H√†m ki·ªÉm tra quy·ªÅn truy c·∫≠p
def protected_route(allowed_role):
    if "user" not in st.session_state:
        st.error("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p trang n√†y.")
        st.stop()
    if st.session_state["user"]["role"].lower() != allowed_role.lower():
        st.error(f"Truy c·∫≠p b·ªã t·ª´ ch·ªëi. Trang n√†y ch·ªâ d√†nh cho {allowed_role}.")
        st.stop()

# Trang ƒëƒÉng nh·∫≠p
def login_page():
    st.title("ƒêƒÉng Nh·∫≠p")
    email = st.text_input("Email")
    password = st.text_input("M·∫≠t kh·∫©u", type="password")
    if st.button("ƒêƒÉng nh·∫≠p"):
        user, error = call_api("post", "login", json={"username": email, "password": password})
        if user:
            st.session_state["user"] = user["user"]
            st.success("ƒêƒÉng nh·∫≠p th√†nh c√¥ng!")
            st.session_state["page"] = "home"
            st.rerun()
        else:
            st.error(error or "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng")

# Trang ch·ªß sinh vi√™n
def student_home():
    protected_route("student")
    st.title("Trang Ch·ªß Sinh Vi√™n")
    user_id = st.session_state["user"]["id"]
    data, error = call_api("get", f"student/{user_id}")
    if data:
        student = data["student"]
        st.markdown("""
            <style>
            .student-info {
                border: 1px solid #e0e0e0;
                padding: 20px;
                border-radius: 8px;
                margin-bottom: 20px;
            }
            .avatar-container {
                text-align: center;
                margin-bottom: 20px;
            }
            .avatar {
                width: 150px;
                height: 150px;
                border-radius: 50%;
                object-fit: cover;
            }
            .detail-link {
                color: #007bff;
                text-decoration: none;
                font-size: 14px;
                cursor: pointer;
            }
            .info-container {
                display: flex;
                justify-content: space-between;
                gap: 20px;
            }
            .feature-grid {
                display: grid;
                grid-template-columns: repeat(3, 1fr);
                gap: 20px;
                margin-top: 20px;
            }
            .feature-card {
                border: 1px solid #e0e0e0;
                padding: 20px;
                border-radius: 8px;
                text-align: center;
                background-color: #f9f9f9;
            }
            .feature-card h3 {
                margin: 10px 0;
                font-size: 18px;
            }
            .feature-card p {
                color: #666;
                font-size: 14px;
                margin-bottom: 15px;
            }
            .icon {
                font-size: 40px;
                color: #007bff;
                margin-bottom: 10px;
            }
            .error {
                color: red;
                font-weight: bold;
            }
            </style>
        """, unsafe_allow_html=True)
        st.markdown('<div class="student-info">', unsafe_allow_html=True)
        col1, col2 = st.columns([1, 3])
        with col1:
            st.markdown('<div class="avatar-container">', unsafe_allow_html=True)
            try:
                st.image("student_avatar.png", width=150, caption="")
            except FileNotFoundError:
                st.write("Kh√¥ng c√≥ ·∫£nh avatar")
            if st.button("Xem chi ti·∫øt", key="view_profile"):
                st.session_state["page"] = "student_profile"
                st.rerun()
            st.markdown('</div>', unsafe_allow_html=True)
        with col2:
            st.subheader("Th√¥ng tin sinh vi√™n")
            col_left, col_right = st.columns(2)
            with col_left:
                st.write(f"**MSSV:** {student['student_code']}")
                st.write(f"**H·ªç t√™n:** {student['name']}")
                st.write(f"**E-mail:** {student['email']}")
            with col_right:
                st.write(f"**Ng√†nh:** {student['major']}")
        st.markdown('</div>', unsafe_allow_html=True)
        if error:
            st.markdown(f'<p class="error">{error}</p>', unsafe_allow_html=True)
        st.markdown('<div class="feature-grid">', unsafe_allow_html=True)
        with st.container():
            st.markdown('<div class="feature-card">', unsafe_allow_html=True)
            st.markdown('<div class="icon">üì¨</div>', unsafe_allow_html=True)
            st.markdown("<h3>Th√¥ng b√°o & G·ª£i √Ω</h3>", unsafe_allow_html=True)
            st.markdown("<p>Nh·∫≠n th√¥ng b√°o & g·ª£i √Ω c·∫£i thi·ªán</p>", unsafe_allow_html=True)
            if st.button("Xem th√¥ng b√°o", key="notifications"):
                st.session_state["page"] = "notifications"
                st.rerun()
            st.markdown('</div>', unsafe_allow_html=True)
        with st.container():
            st.markdown('<div class="feature-card">', unsafe_allow_html=True)
            st.markdown('<div class="icon">üí¨</div>', unsafe_allow_html=True)
            st.markdown("<h3>Ph·∫£n h·ªìi & H√†nh ƒë·ªông</h3>", unsafe_allow_html=True)
            st.markdown("<p>Tr·∫£ l·ªùi th√¥ng b√°o & th·ª±c hi·ªán h√†nh ƒë·ªông</p>", unsafe_allow_html=True)
            if st.button("Th·ª±c hi·ªán ngay", key="actions"):
                st.session_state["page"] = "actions"
                st.rerun()
            st.markdown('</div>', unsafe_allow_html=True)
        with st.container():
            st.markdown('<div class="feature-card">', unsafe_allow_html=True)
            st.markdown('<div class="icon">üìö</div>', unsafe_allow_html=True)
            st.markdown("<h3>C·∫£i thi·ªán h·ªçc t·∫≠p</h3>", unsafe_allow_html=True)
            st.markdown("<p>ƒê·ªÅ xu·∫•t t√†i li·ªáu & h·ªó tr·ª£ h·ªçc t·∫≠p</p>", unsafe_allow_html=True)
            if st.button("Kh√°m ph√° ngay", key="resources"):
                st.session_state["page"] = "resources"
                st.rerun()
            st.markdown('</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
    elif error:
        st.error(error)
        if st.button("Quay l·∫°i ƒëƒÉng nh·∫≠p"):
            st.session_state["user"] = None
            st.session_state["page"] = "login"
            st.rerun()
    else:
        st.write("ƒêang t·∫£i...")

# Trang h·ªì s∆° sinh vi√™n
def student_profile():
    protected_route("student")
    st.title("H·ªì S∆° Sinh Vi√™n")
    user_id = st.session_state["user"]["id"]
    data, error = call_api("get", f"student-profile/{user_id}")
    st.markdown("""
        <style>
        .section {
            border: 1px solid #e0e0e0;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
        }
        .profile-content {
            display: flex;
            gap: 20px;
            align-items: center;
        }
        .avatar {
            width: 150px;
            height: 150px;
            border-radius: 50%;
            object-fit: cover;
        }
        .info {
            flex: 1;
        }
        .update-button {
            text-align: center;
            margin-top: 20px;
        }
        </style>
    """, unsafe_allow_html=True)
    if data:
        student = data["student"]
        st.markdown('<div class="section">', unsafe_allow_html=True)
        st.subheader("Th√¥ng tin h·ªçc v·∫•n")
        st.markdown('<div class="profile-content">', unsafe_allow_html=True)
        try:
            st.image("student_avatar.png", width=150, caption="")
        except FileNotFoundError:
            st.write("Kh√¥ng c√≥ ·∫£nh avatar")
        st.markdown('<div class="info">', unsafe_allow_html=True)
        col1, col2 = st.columns(2)
        with col1:
            st.write(f"**MSSV:** {student['student_code']}")
            st.write(f"**H·ªç t√™n:** {student['name']}")
            st.write(f"**Gi·ªõi t√≠nh:** {student['gender']}")
            st.write(f"**Ng√†y sinh:** {student['birth_date']}")
            st.write(f"**E-mail:** {student['email']}")
            st.write(f"**S·ªë ƒëi·ªán tho·∫°i:** {student['phone']}")
        with col2:
            st.write(f"**CCCD:** {student['id_number']}")
            st.write(f"**Tr·∫°ng th√°i:** {student['status']}")
            st.write(f"**L·ªõp h·ªçc:** {student['class']}")
            st.write(f"**B·∫≠c ƒë√†o t·∫°o:** {student['level']}")
            st.write(f"**Khoa:** {student['department']}")
            st.write(f"**Ng√†nh:** {student['major']}")
        st.markdown('</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
        st.markdown('<div class="section">', unsafe_allow_html=True)
        st.subheader("ƒê·ªãa ch·ªâ hi·ªán th·ªùi")
        st.write(f"**ƒê·ªãa ch·ªâ:** {student['current_address']['street']}, {student['current_address']['ward']}, {student['current_address']['district']}, {student['current_address']['city']}, {student['current_address']['country']}")
        st.markdown('</div>', unsafe_allow_html=True)
        st.markdown('<div class="section">', unsafe_allow_html=True)
        st.subheader("Ng∆∞·ªùi li√™n h·ªá kh·∫©n c·∫•p")
        st.write(f"**T√™n:** {student['emergency_contact']['name']}")
        st.write(f"**Quan h·ªá:** {student['emergency_contact']['relationship']}")
        st.write(f"**ƒê·ªãa ch·ªâ:** {student['emergency_contact']['address']['street']}, {student['emergency_contact']['address']['ward']}, {student['emergency_contact']['address']['district']}, {student['emergency_contact']['address']['city']}, {student['emergency_contact']['address']['country']}")
        st.write(f"**S·ªë ƒëi·ªán tho·∫°i:** {student['emergency_contact']['phone']}")
        st.write(f"**Email:** {student['emergency_contact']['email']}")
        st.markdown('</div>', unsafe_allow_html=True)
        st.markdown('<div class="section">', unsafe_allow_html=True)
        st.subheader("C·∫≠p nh·∫≠t th√¥ng tin")
        with st.form(key="update_profile_form"):
            name = st.text_input("H·ªç t√™n", value=student["name"])
            email = st.text_input("E-mail", value=student["email"])
            phone = st.text_input("S·ªë ƒëi·ªán tho·∫°i", value=student["phone"])
            major = st.text_input("Ng√†nh h·ªçc", value=student["major"])
            gender = st.selectbox("Gi·ªõi t√≠nh", ["Nam", "N·ªØ"], index=["Nam", "N·ªØ"].index(student["gender"]) if student["gender"] in ["Nam", "N·ªØ"] else 0)
            birth_date = st.date_input("Ng√†y sinh", value=parse(student["birth_date"]) if student["birth_date"] else date.today())
            id_number = st.text_input("CCCD", value=student["id_number"])
            class_name = st.text_input("L·ªõp h·ªçc", value=student["class"])
            level = st.text_input("B·∫≠c ƒë√†o t·∫°o", value=student["level"])
            department = st.text_input("Khoa", value=student["department"])
            current_address_street = st.text_input("ƒê·ªãa ch·ªâ (ƒê∆∞·ªùng)", value=student["current_address"]["street"])
            current_address_ward = st.text_input("Ph∆∞·ªùng", value=student["current_address"]["ward"])
            current_address_district = st.text_input("Qu·∫≠n", value=student["current_address"]["district"])
            current_address_city = st.text_input("Th√†nh ph·ªë", value=student["current_address"]["city"])
            current_address_country = st.text_input("Qu·ªëc gia", value=student["current_address"]["country"])
            emergency_contact_name = st.text_input("T√™n ng∆∞·ªùi li√™n h·ªá kh·∫©n c·∫•p", value=student["emergency_contact"]["name"])
            emergency_contact_relationship = st.text_input("Quan h·ªá", value=student["emergency_contact"]["relationship"])
            emergency_contact_phone = st.text_input("S·ªë ƒëi·ªán tho·∫°i li√™n h·ªá kh·∫©n c·∫•p", value=student["emergency_contact